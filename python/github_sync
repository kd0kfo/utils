#!/usr/bin/env python

from getopt import getopt,GetoptError
from sys import argv
from urllib2 import urlopen,HTTPError
from bs4 import BeautifulSoup
import os.path as OP
import os
import subprocess as SP

def do_git_cmd(cmd):
    proc = SP.Popen(cmd.split(),stdout=SP.PIPE)
    exit_val = proc.wait()
    msgs = proc.communicate()
    if exit_val:
        raise Exception("EXIT: {0}\n{1}".format(exit_val,cmd))

def print_usage():
    import os.path
    prog = os.path.basename(argv[0])
    print("Usage: {0} <github user>")
    
short_opts = ""
long_opts = []

try:
    (opts, args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as ge:
    print(ge)
    exit(1)

for (opt, optarg) in opts:
    while opt[0] == '-':
        opt = opt[1:]

if len(args) != 1:
    print_usage()
    exit(1)

url = "https://github.com/{0}?tab=repositories".format(args[0])

try:
    html = urlopen(url).read()
except HTTPError as httpe:
    print("Error reading: {0}".format(url))
    print("Message: {0} {1}".format(httpe.getcode(),httpe.msg))
    exit(httpe.getcode())

soup = BeautifulSoup(html,"lxml")
lists = [li for li in soup.find_all('li')]

if not lists:
    print(soup.text)
    print("Problem with {0}".format(url))

progress_counter = 1
num_repos = len(lists)
for l in lists:
    for h3 in l.findAll("h3"):
        if h3.findAll("span","mega-icon mega-icon-public-repo") and hasattr(h3,"a"):
            path = h3.a["href"]
            repo_url = "git@github.com:{0}.git".format(path)
            dir_name = OP.basename(path)
            
            print("Syncing {0} ({1}/{2})".format(dir_name,progress_counter,num_repos))
            progress_counter += 1
            if not OP.isdir(dir_name):
                try:
                    do_git_cmd("git clone {0}".format(repo_url))
                    orig_dir = os.getcwd()
                    os.chdir(dir_name)
                    do_git_cmd("git remote rename origin github")
                    os.chdir(orig_dir)
                except Exception as e:
                    print("Problem syncing {0}".format(dir_name))
                    raise e
            else:
                try:
                    orig_dir = os.getcwd()
                    os.chdir(dir_name)
                    do_git_cmd("git fetch github")
                    os.chdir(orig_dir)
                except Exception as e:
                    print("Problem syncing {0}".format(dir_name))
                    raise e
